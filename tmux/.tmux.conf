################################################################################
# General config
################################################################################
set -g default-shell $SHELL

# Enable mouse support including pane focusing and selection support
set -g mouse on
set -ga terminal-overrides ',xterm*:smcup@:rmcup@'

# True color settings
set -g default-terminal "screen-256color"
set -ga terminal-overrides ",*:Tc"

# Remove delay after escape
set -sg escape-time 0

# Increase scroll back limit
set -g history-limit 10000

# Set the terminal window title to the active application
set -g set-titles on
set -g set-titles-string "#{pane_current_command} : #{b:pane_current_path}"

# Start window numbering at 1
set -g base-index 1
setw -g pane-base-index 1

# Renumber windows when one is closed
set -g renumber-windows on

# Notification of activity in other windows
set -g visual-activity off
set -g visual-bell off
set -g visual-silence off
set -g bell-action none
setw -g monitor-activity off

# Border colours
setw -g pane-border-style 'fg=brightblack'
setw -g pane-active-border-style 'bg=black fg=brightblack' 

################################################################################
# Status bar
################################################################################
set -g status-interval 5
set -g status-position bottom
set -g status-justify left
set -g message-style 'fg=yellow bg=black'
set -g status-style 'fg=white bg=black'

# Pane renaming
set -g automatic-rename on
# set -g automatic-rename-format '#{pane_current_command}  #{b:pane_current_path}'
set -g automatic-rename-format '\
#{?#{==:#{pane_current_command},'vim'},#[fg=green]#[fg=white],\
#{?#{==:#{pane_current_command},'lazygit'},#[fg=magenta]#[fg=white],\
#{pane_current_command}}}  #{b:pane_current_path}' # always append pwd

# Left status area - display the session name (highlight when prefix key is pressed)
set -g status-left-length 20
set -g status-left '#{?client_prefix,#[fg=yellow]#[bg=black]#[fg=black]#[bg=yellow]#S#[fg=yellow]#[bg=black] #[fg=white dim]#[bg=black]│ ,#[fg=black,bg=white]#S#[fg=default,bg=default] #[fg=white dim,bg=black]│ }'

# Active window label style (fg is for the number only, bg is background of entire label)
setw -g window-status-current-style 'fg=white bg=black'
setw -g window-status-current-format '#W#[fg=white dim] │'

# Inactive window label style (fg is for the number only, bg is background of entire label)
# setw -g window-status-style 'fg=white dim bg=black'
setw -g window-status-format '#[fg=white dim]#W │'

# Right status area - display the weather, date, and time "$WEATHER | Sat, Feb 23 | 2:23 PM"
setw -g clock-mode-style 12
set -g status-right-length 64
WEATHER='#(curl -s wttr.in/Orlando\?u\&format\="%%t%%20%%w,%%20%%C" | cut -c2-)'
set -g status-right "#[fg=white dim,bg=black] $WEATHER │ %a, %b %d │ %-I:%M %p "

################################################################################
# Key bindings
################################################################################
# Remap prefix from 'C-b' to 'C-a'
set -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix

# Reload the configuration file
bind-key r source-file ~/.tmux.conf \; display-message "config reloaded..."

# Toggle the status bar
bind-key b set -g status

# Nicer split window bindings
unbind-key %
bind-key v split-window -h -c "#{pane_current_path}"
unbind-key '"'
bind-key h split-window -v -c "#{pane_current_path}"

# Create or kill a window
bind-key -n M-n new-window
bind-key -n M-w confirm-before -p "kill window #I (#W)? (y/n)" kill-window

# Swap window position left or right
bind-key -n C-M-Left swap-window -t -1\; select-window -t -1
bind-key -n C-M-Right swap-window -t +1\; select-window -t +1

# Switch between windows left and right
bind-key -n M-Left select-window -t -1
bind-key -n M-Right select-window -t +1

# Switch windows using Alt-<number>.
bind-key -n M-1 select-window -t 1
bind-key -n M-2 select-window -t 2
bind-key -n M-3 select-window -t 3
bind-key -n M-4 select-window -t 4
bind-key -n M-5 select-window -t 5
bind-key -n M-6 select-window -t 6
bind-key -n M-7 select-window -t 7
bind-key -n M-8 select-window -t 8
bind-key -n M-9 select-window -t 9

################################################################################
# Copy mode
################################################################################
# Use vim key bindings in copy mode
setw -g mode-keys vi

# Simulate vim selection and yank behavior
unbind-key -T copy-mode-vi Space; # Default for begin-selection
unbind-key -T copy-mode-vi Enter; # Default for copy-selection
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi V send-keys -X select-line
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
# bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xsel --clipboard"
# bind-key -T copy-mode-vi Y send-keys -X copy-line
# bind-key P paste-buffer

# Retain mouse selection when mouse button is released
unbind-key -T copy-mode-vi MouseDragEnd1Pane

# Double or triple-click to select and copy words or lines
bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-selection-no-clear
bind-key -T copy-mode-vi DoubleClick1Pane select-pane \; send -X select-word \; send -X copy-pipe-no-clear "xsel -i"
bind-key -T copy-mode-vi TripleClick1Pane select-pane \; send -X select-line \; send -X copy-pipe-no-clear "xsel -i"

# Incremental highlighting of search term
bind-key -T copy-mode-vi / command-prompt -i -p "(search down)" "send -X search-forward-incremental \"%%%\""
bind-key -T copy-mode-vi ? command-prompt -i -p "(search up)" "send -X search-backward-incremental \"%%%\""

################################################################################
# vim-tmux-navigator: smart pane switching with awareness of Vim splits.
################################################################################
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' 'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' 'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' 'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' 'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
  "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\' 'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
  "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\' 'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# Remap clear screen to <Prefix> C-l
bind-key C-l send-keys -R C-l \; clear-history

# Version 3.3a defaulted this value to off, so turn it on when supported
if-shell -b '[ "$(echo "$tmux_version >= 3.3" | bc)" = 1 ]' {
  set -g allow-passthrough on
}

################################################################################
# Plugins
################################################################################
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @yank_selection 'clipboard' # 'primary', 'secondary', or 'clipboard'
set -g @yank_selection_mouse 'clipboard' # 'primary', 'secondary', or 'clipboard' 
set -g @yank_action 'copy-pipe' # or 'copy-pipe-and-cancel' for the default
set -g @yank_with_mouse off # or 'on'

# Install TPM and plugins if necessary
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# Initialize TPM (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
