" {{{ Plugins
function! PackInit() abort
  packadd minpac
  call minpac#init()
  call minpac#add('k-takata/minpac', {'type': 'opt'})          " Plugin manager 
  call minpac#add('christoomey/vim-tmux-navigator')            " Navigation between tmux panes and vim splits
  call minpac#add('fnune/base16-vim')                          " Base16 themes set by base16-shell
  call minpac#add('junegunn/fzf')                              " Fuzzy finder integration
  call minpac#add('junegunn/fzf.vim')                          " Additional commands for fzf
  call minpac#add('junegunn/goyo.vim')                         " Distraction-free writing
  call minpac#add('junegunn/vim-slash')                        " Improved in-buffer search experience
  call minpac#add('machakann/vim-highlightedyank')             " Highlight yanked text
  call minpac#add('machakann/vim-sandwich')                    " Operators and text for manipulating sandwiched text
  call minpac#add('neoclide/coc.nvim', {'branch': 'release'})  " Language Server Protocol client
  call minpac#add('tpope/vim-abolish')                         " Substitute and abbreviate variants of a word
  call minpac#add('tpope/vim-commentary')                      " Code commenting shortcuts
  call minpac#add('tpope/vim-fugitive')                        " Git shortcuts
  call minpac#add('tpope/vim-obsession')                       " Continuously updated session files
  call minpac#add('wellle/targets.vim')                        " Additional text objects
endfunction

command! PackClean  call PackInit() | call minpac#clean()
command! PackStatus call PackInit() | call minpac#status()
command! PackUpdate call PackInit() | call minpac#update('', {'do': 'call minpac#status()'})
command! PackUpdateAndQuit call PackInit() | call minpac#update('', {'do': 'qall'})
" }}}

" {{{ Mappings
" Set the Leader key to Space
nnoremap <Space> <Nop>
let mapleader = "\<Space>"
let maplocalleader = ','

" Save a file
nnoremap <Leader>w :w<CR>

" Go to first file on the line
nnoremap <Leader>gf ^f/gf

" Replace all occurrences of word under cursor
nnoremap <Leader>h :%s/\<<C-r><C-w>\>//g<Left><Left>

" Open new line and stay in normal mode
nnoremap <Leader>o o<Esc>
nnoremap <Leader>O O<Esc>

" Use wildmenu to quickly switch buffers
nnoremap <Leader><Tab> :buffer<Space><Tab>

" Format entire file
nnoremap <Leader>= gg=G<C-o><C-o>

" Open lazygit in a new tab
nnoremap <silent> <Leader>G :$tab term ++close lazygit<CR>

" Quicker split resizing
noremap <Leader><Left>  :vertical resize -3<CR>
noremap <Leader><Right> :vertical resize +3<CR>
noremap <Leader><Up>    :resize +3<CR>
noremap <Leader><Down>  :resize -3<CR>

" Toggle between alternate files
nnoremap <Backspace> <C-^>

" Add relative vertical movements to the jumplist
nnoremap <expr> j (v:count > 1 ? "m'" . v:count : '') . 'gj'
nnoremap <expr> k (v:count > 1 ? "m'" . v:count : '') . 'gk'

" Change operations are directed to the black hole register
nnoremap c "_c
nnoremap C "_C

" Joining lines will keep cursor position
nnoremap J mzJ`z

" Yank to the end of line
nnoremap Y y$

" Disable vim's exit message when pressing C-c
nnoremap <C-c> <silent> <C-c>

" +/- -> Increment/decrement numbers in normal or visual mode
nnoremap + <C-a>
nnoremap - <C-x>
xnoremap + g<C-a>gv
xnoremap - g<C-x>gv

" <CTRL-W>h/j/k/l -> Move windows left/up/down/right
nnoremap <C-w>j <C-w>J
nnoremap <C-w>k <C-w>K
nnoremap <C-w>h <C-w>H
nnoremap <C-w>l <C-w>L

" Navigate buffers
nmap <silent> [B :bfirst<CR>
nmap <silent> ]b :bnext<CR>
nmap <silent> [b :bprevious<CR>
nmap <silent> ]B :blast<CR>

" Navigate location list entries
nmap <silent> [L :lfirst<CR>zz
nmap <silent> ]l :lnext<CR>zz
nmap <silent> [l :lprevious<CR>zz
nmap <silent> ]L :llast<CR>zz

" Navigate quickfix list entries
nmap <silent> [Q :cfirst<CR>zz
nmap <silent> ]q :cnext<CR>zz
nmap <silent> [q :cprevious<CR>zz
nmap <silent> ]Q :clast<CR>zz

" Exit insert mode faster
inoremap <Esc> <Esc>l
inoremap kj <Esc>l
inoremap <C-c> <Esc>l

" Fix arrow keys in insert mode
inoremap <silent> <Esc>OA <Up>
inoremap <silent> <Esc>OB <Down>
inoremap <silent> <Esc>OC <Right>
inoremap <silent> <Esc>OD <Left>

" Movement in insert mode
inoremap <C-h> <C-o>h
inoremap <C-l> <C-o>a
inoremap <C-j> <C-o>j
inoremap <C-k> <C-o>k
inoremap <C-^> <C-o><C-^>

" Command line begin/end line
cnoremap <C-a> <Home>
cnoremap <C-e> <End>

" Navigate through partial search matches with Tab/S-Tab
cnoremap <expr> <Tab> getcmdtype() =~ '[/?]' ? "<C-g>" : "<Tab>"
cnoremap <expr> <S-Tab> getcmdtype() =~ '[/?]' ? "<c-t>" : "<S-Tab>"

" Apply last edit to visual selection
vnoremap . :norm .<CR>

" Don't overwrite paste buffer when pasting over visual selection
xnoremap p "_dP

" Replace all occurrences of visual selection
xnoremap <Leader>h y:%s/\<<C-r>0\>//g<Left><Left>

" }}}

" {{{ Autocommands
augroup Vimrc
  autocmd!

  " Save modified buffer during idle after 'updatetime' has elapsed (default 4 sec)
  autocmd CursorHoldI,CursorHold * silent! :update

  " Equalize splits when Vim is resized
  autocmd VimResized * wincmd =

  " Show cursorline in active window only 
  autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  autocmd WinLeave * setlocal nocursorline

  " Jump to the last known cursor position. See $VIMRUNTIME/defaults.vim
  autocmd BufReadPost *
        \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit' |
        \   silent execute "normal! g`\"" |
        \ endif

  " Change the working directory to the git project root (uses vim-fugitive)
  autocmd BufLeave * let b:last_cwd = getcwd()
  autocmd BufEnter * 
        \ if exists('b:last_cwd') |
        \   silent execute 'lcd' b:last_cwd |
        \ else |
        \   silent! Glcd |
        \ endif

  " Restore session if a Session.vim file exists
  autocmd VimEnter * nested
        \ if !argc() && empty(v:this_session) && filereadable('Session.vim') && !&modified |
        \   silent execute 'source Session.vim' |
        \ endif

  " Yank to system clipboard under WSL
  let s:clip = '/mnt/c/Windows/System32/clip.exe'
  if executable(s:clip)
    autocmd TextYankPost * 
        \ if v:event.operator ==# 'y' | 
        \   call system(s:clip, @0) | 
        \ endif
  endif

augroup END
" }}}

" {{{ Options
" General
if !&modeline|set modeline|endif " Enable modeline which may be off by default
filetype plugin indent on        " Load plugins according to detected filetype
set background=dark              " Dark background for dark theme support
set backspace=indent,eol,start   " Make backspace work as you would expect
set directory=/tmp//             " Location of the swap file
set display=lastline             " Show as much as possible of the last line
set encoding=utf-8               " Properly display UTF-8 symbols
set foldopen+=jump               " Open a fold if we jump inside it
set hidden                       " Switch between buffers without having to save first
set iskeyword+=-                 " Treat dash separated words as a word text object
set laststatus=2                 " Always show statusline
set mouse=a                      " Enable use of the mouse in all modes
set nobackup                     " Disable backup files
set noshowmode                   " Don't show current mode in command-line
set nrformats=                   " Only recognize decimal numbers for increment/decrement
set pastetoggle=<F2>             " Toggle paste mode on/off
set scrolloff=5                  " Show at least 5 lines above and below the cursor
set shortmess=acFIT              " Customize vim messages
set showcmd                      " Show already typed keys when more are expected
set spelllang=en_us              " Set language for spell checking
set termguicolors                " Use 24-bit colors
set updatetime=300               " Shorter CursorHold delay
scriptencoding utf-8             " Specify character encoding used in this file

" Editing
syntax on                        " Enable syntax highlighting
set autoindent                   " Indent according to previous line
set expandtab                    " Use spaces instead of tabs
set fillchars+=vert:\│           " Vertical split separator
set fillchars+=fold:\            " Closed fold indicator
set fillchars+=eob:\             " End of buffer character
set listchars=tab:▸\ ,trail:·    " Characters to show in 'list' mode
set matchpairs+=<:>              " Add angle brackets to list of matching pairs
set nojoinspaces                 " Don't add 2 spaces after sentences when joining lines
set nowrap                       " Don't automatically wrap long lines to the window
set number                       " Show line numbers
set shiftround                   " >> indents to next multiple of 'shiftwidth'
set shiftwidth=2                 " >> indents by 2 spaces
set signcolumn=yes               " Always show the signcolumn
set softtabstop=2                " Tab key indents by 2 spaces
set splitbelow splitright        " Open new split panes to right and bottom
set textwidth=0                  " Disable maximum text width

" Searching
set ignorecase                   " Case insensitive search
set incsearch                    " Highlight while searching with / or ?
set path=$PWD/**                 " Find all files under this directory
set smartcase                    " Case sensitive search when using capital letter
set wildcharm=<Tab>              " Allow wildmenu expansion from macros/remaps
set wildignorecase               " Case-insensitive completion of commands, filenames
set wildmenu                     " Enhanced command-line completion
set wildmode=longest:full,full   " Wildmenu completion mode

" Cursor shape
let &t_SI = "\e[6 q"             " INSERT mode - beam cursor
let &t_EI = "\e[2 q"             " NORMAL mode - block cursor
let &t_SR = "\e[4 q"             " REPLACE mode - underline cursor

" Persistent undo
set undodir=/tmp/.vim-undo
if !isdirectory(&undodir)
  call mkdir(&undodir, "p", 0700)
endif
set undofile

" Yank to system clipboard, X11 support
if has('clipboard')
  set clipboard=unnamed
  if has('unnamedplus')
    set clipboard+=unnamedplus
  endif
endif

" True color support
if exists('$TMUX')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

" Use rg for grep and define a custom grep command
if executable('rg')
  set grepprg=rg\ --vimgrep\ --hidden\ --ignore-case
  set grepformat^=%f:%l:%c:%m
endif

" Grep command opens the quickfix window with results
command! -nargs=+ -complete=file Grep
      \ execute 'silent grep! <args>' | redraw! | cwindow

" vim:fdm=marker
" }}}
