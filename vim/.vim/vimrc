" {{{ Plugins
function! PackInit() abort

  " Plugin manager
  packadd minpac
  call minpac#init()
  call minpac#add('k-takata/minpac', {'type': 'opt'})

  " Color themes
  call minpac#add('chriskempson/base16-vim')  " custom settings: ~/.vim/plugin/base16.vim

  " Status line
  call minpac#add('itchyny/lightline.vim')    " custom settings: ~/.vim/plugin/lightline.vim

  " Lightline color themes
  call minpac#add('daviesjamie/vim-base16-lightline')

  " Syntax and semantic error checking
  call minpac#add('dense-analysis/ale')       " custom settings: ~/.vim/plugin/ale.vim

  " Fuzzy finder
  call minpac#add('junegunn/fzf.vim')         " custom settings: ~/.vim/plugin/fzf.vim

  " Git information in the sign column
  call minpac#add('mhinz/vim-signify')        " custom settings: ~/.vim/plugin/signify.vim

  " Code commenting shortcuts
  call minpac#add('tpope/vim-commentary')     " custom settings: ~/.vim/plugin/commentary.vim

  " Git shortcuts
  call minpac#add('tpope/vim-fugitive')

  " Session shortcuts
  call minpac#add('tpope/vim-obsession')      " custom settings: ~/.vim/plugin/obsession.vim

  " Add, change, delete surroundings in pairs
  call minpac#add('tpope/vim-surround')

  " Better paste behavior
  call minpac#add('ConradIrwin/vim-bracketed-paste')

  " Navigation between tmux panes and vim splits
  call minpac#add('christoomey/vim-tmux-navigator')

  " Highlight yanked text
  call minpac#add('machakann/vim-highlightedyank')

  " Automatically change to file's project directory
  call minpac#add('airblade/vim-rooter')

  " File browser
  call minpac#add('lambdalisue/fern.vim')     " custom settings: ~/.vim/plugin/fern.vim

  " More text objects
  call minpac#add('wellle/targets.vim')

  " CMake commands
  call minpac#add('ilyachur/cmake4vim')       " custom settings: ~/.vim/plugin/cmake4vim.vim

endfunction

command! PackClean  call PackInit() | call minpac#clean()
command! PackStatus call PackInit() | call minpac#status()
command! PackUpdate call PackInit() | call minpac#update('', {'do': 'call minpac#status()'})
command! PackUpdateAndQuit call PackInit() | call minpac#update('', {'do': 'qall'})

" Add FZF to the runtime path
set runtimepath+=$HOME/.fzf,/usr/local/opt/fzf
" }}}

" {{{ Key Mappings
" Set the Leader key to Space
nnoremap <Space> <Nop>
let mapleader = "\<Space>"

" Save a file
nnoremap <Leader>w :update<CR>

" Turn off search highlighting
nnoremap <silent> <Leader>/ :let @/ = ""<esc>

" Replace all occurrences of word under cursor
nnoremap <Leader>h :%s/\<<C-r><C-w>\>//g<Left><Left>

" Use wildmenu to quickly switch buffers
nnoremap <Leader><Tab> :buffer<Space><Tab>

" Format entire file
nnoremap <Leader>= gg=G<C-o><C-o>

" Open lazygit in a new tab
nnoremap <silent> <Leader>G :tab term ++close lazygit<CR>

" Quicker split resizing
noremap <Leader><Left>  :vertical resize -3<CR>
noremap <Leader><Right> :vertical resize +3<CR>
noremap <Leader><Up>    :resize +3<CR>
noremap <Leader><Down>  :resize -3<CR>

" Joining lines will keep cursor position
nnoremap J mzJ`z

" Next/previous search matches unfolded and centered on screen
noremap n nzvzz
noremap N Nzvzz

" Open new line and stay in normal mode
nnoremap o o<esc>
nnoremap O O<esc>

" Yank to the end of line
map Y y$

" Don't jump to next match on *
nnoremap * *<c-o>

" Exit insert mode faster
inoremap kj <esc>
inoremap <C-c> <esc>

" Move lines in normal, insert, and visual with alt+j/k
if has('mac')
  nnoremap ∆ m`:move .+1<CR>==``
  nnoremap ˚ m`:move .-2<CR>==``
  inoremap ∆ <Esc>m`:move .+1<CR>==``gi
  inoremap ˚ <Esc>m`:move .-2<CR>==``gi
  vnoremap ∆ :move '>+1<CR>gv=gv
  vnoremap ˚ :move '<-2<CR>gv=gv
else
  nnoremap <Esc>j m`:move .+1<CR>==``
  nnoremap <Esc>k m`:move .-2<CR>==``
  inoremap <Esc>j <Esc>m`:move .+1<CR>==``gi
  inoremap <Esc>k <Esc>m`:move .-2<CR>==``gi
  vnoremap <Esc>j :move '>+1<CR>gv=gv
  vnoremap <Esc>k :move '<-2<CR>gv=gv
endif

" Movement in insert mode
inoremap <C-h> <C-o>h
inoremap <C-l> <C-o>a
inoremap <C-j> <C-o>j
inoremap <C-k> <C-o>k
inoremap <C-^> <C-o><C-^>

" <CTRL>h/j/k/l -> Switch between buffers - superseded by vim-tmux-navigator
" nnoremap <C-j> <C-w>j
" nnoremap <C-k> <C-w>k
" nnoremap <C-h> <C-w>h
" nnoremap <C-l> <C-w>l

" <CTRL-W>h/j/k/l -> Move windows left/up/down/right
nnoremap <C-w>j <C-w>J
nnoremap <C-w>k <C-w>K
nnoremap <C-w>h <C-w>H
nnoremap <C-w>l <C-w>L

" +/- -> Increment/decrement numbers in normal or visual mode
nnoremap + <C-a>
nnoremap - <C-x>
vnoremap + g<C-a>gv
vnoremap - g<C-x>gv

" Tab navigation from a terminal window
tmap <C-h> <C-w>:tabp<CR>
tmap <C-l> <C-w>:tabn<CR>

" Tab navigation in normal mode
nnoremap <tab> gt

" Command line begin/end line
cnoremap <c-a> <home>
cnoremap <c-e> <end>
15
" Visual mode search word under cursor with */#
function! s:VSetSearch()
  let temp = @@
  norm! gvy
  let @/ = '\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
  let @@ = temp
endfunction
vnoremap * :<C-u>call <SID>VSetSearch()<CR>//<CR><c-o>
vnoremap # :<C-u>call <SID>VSetSearch()<CR>??<CR><c-o>
" }}}

" {{{ Autocommands
" Save modified buffer during idle after 'updatetime' has elapsed (default 4 sec)
augroup AutoSave
  autocmd!
  autocmd CursorHoldI,CursorHold * silent! :update
augroup END

" Disable auto-commenting on new lines
augroup DisableAutoCommenting
  autocmd!
  autocmd FileType * set fo-=c fo-=r fo-=o fo-=j
augroup END

" Show cursorline in active window (line number only)
augroup CursorLineOnlyInActiveWindow
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  autocmd WinLeave * setlocal nocursorline
augroup END
highlight clear CursorLine  " Highlight current line number rather than entire line

" Automatically equalize splits when Vim is resized
augroup AutoResizePanesOnVimResize
  autocmd!
  autocmd VimResized * wincmd =
augroup END
" }}}

" {{{ Make Commands
" custom make commands for c++ projects
" let &makeprg='make -j3 -C build --no-print-directory'
" command! -bar Cmake let &makeprg = 'make -C build --no-print-directory' <bar> make
" command! Ctest let &makeprg = 'cd build && ctest -V --output-on-failure' <bar> make
" command! CmakeCtest Cmake <bar> Ctest
" }}}

" {{{ Options
" General
if &compatible|set nocompatible|endif " Set nocompatible if -u option is used, default is off
if !&modeline|set modeline|endif      " Enable modeline which may be off by default
filetype plugin indent on       " Load plugins according to detected filetype
set backspace=indent,eol,start  " Make backspace work as you would expect
set directory=/tmp//            " Location of the swap file
set display=lastline            " Show as much as possible of the last line
set encoding=utf-8              " Properly display UTF-8 symbols
scriptencoding utf-8            " Specify character encoding used in this file
set foldopen+=jump              " Open a fold if we jump inside it
set hidden                      " Switch between buffers without having to save first
set iskeyword+=-                " Treat dash separated words as a word text object
set laststatus=2                " Always show statusline
set nobackup                    " Disable backup files
set noshowmode                  " Don't show current mode in command-line
set pastetoggle=<F2>            " Toggle paste mode on/off
set shortmess=aFIT              " Customize vim messages
set showcmd                     " Show already typed keys when more are expected
set spelllang=en_us             " Set language for spell checking

" Editing
syntax on                       " Enable syntax highlighting
set autoindent                  " Indent according to previous line
set expandtab                   " Use spaces instead of tabs
set fillchars+=vert:│,fold:\    " Vertical split and fold separators
set nowrap                      " Do not automatically wrap on load
set number                      " Show line numbers
set shiftround                  " >> indents to next multiple of 'shiftwidth'
set shiftwidth=2                " >> indents by 2 spaces
set softtabstop=2               " Tab key indents by 4 spaces
set splitbelow splitright       " Open new split panes to right and bottom
set termguicolors               " Use 24-bit colors
set textwidth=0                 " Disable maximum text width

" Searching
set gdefault                    " Global substitution by default
set hlsearch                    " Keep matches highlighted
set ignorecase                  " Case insensitive search
set incsearch                   " Highlight while searching with / or ?
set path=$PWD/**                " Find all files under this directory
set smartcase                   " Case sensitive search when using capital letter
set wildcharm=<Tab>             " Allow wildmenu expansion from macros/remaps
set wildignorecase              " Case-insensitive completion of commands, filenames
set wildmenu                    " Enhanced command-line completion

" Various
let &t_SI = "\e[6 q"            " INSERT mode - beam cursor
let &t_EI = "\e[2 q"            " NORMAL mode - block cursor
let &t_SR = "\e[4 q"            " REPLACE mode - underline cursor

" True color support
if exists('$TMUX')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

" Colorscheme is loaded from Base16-shell via
" ~/.vim/plugin/base16.vim

" Yank to system clipboard
if has('clipboard')
  set clipboard=unnamed " copy to the system clipboard
  if has('unnamedplus') " X11 support
    set clipboard+=unnamedplus
  endif
endif

" vim:fdm=marker
" }}}
