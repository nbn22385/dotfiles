" {{{ Plugins
function! PackInit() abort

  " Plugin manager
  packadd minpac
  call minpac#init()
  call minpac#add('k-takata/minpac', {'type': 'opt'})

  " Color themes
  call minpac#add('lifepillar/vim-gruvbox8')
  call minpac#add('sainnhe/gruvbox-material')
  call minpac#add('ulwlu/elly.vim')

  " Base16 themes ($HOME/.vim/plugin/base16.vim)
  call minpac#add('chriskempson/base16-vim')
  call minpac#add('daviesjamie/vim-base16-lightline')

  " Status line ($HOME/.vim/plugin/lightline.vim)
  call minpac#add('itchyny/lightline.vim')
  call minpac#add('josa42/vim-lightline-coc')

  " Syntax and semantic error checking (plugin/coc.vim)
  call minpac#add('neoclide/coc.nvim', { 'branch': 'release'} )
  call minpac#add('jackguo380/vim-lsp-cxx-highlight')

  " Fuzzy finder ($HOME/.vim/plugin/fzf.vim)
  call minpac#add('junegunn/fzf')
  call minpac#add('junegunn/fzf.vim')

  " CMake commands ($HOME/.vim/plugin/cmake4vim.vim)
  call minpac#add('ilyachur/cmake4vim')

  " Filetype icons
  call minpac#add('ryanoasis/vim-devicons')

  " Improved in-buffer search experience ($HOME/.vim/plugin/slash.vim)
  call minpac#add('junegunn/vim-slash')

  " Code commenting shortcuts
  call minpac#add('tpope/vim-commentary')

  " Asynchronous build jobs
  call minpac#add('tpope/vim-dispatch')

  " Git shortcuts
  call minpac#add('tpope/vim-fugitive')

  " Continuously updated session files
  call minpac#add('tpope/vim-obsession')

  " Add, change, delete surroundings in pairs
  call minpac#add('tpope/vim-surround')

  " Navigation between tmux panes and vim splits
  call minpac#add('christoomey/vim-tmux-navigator')

  " Highlight yanked text
  call minpac#add('machakann/vim-highlightedyank')

  " Automatically change to file's project directory
  call minpac#add('airblade/vim-rooter')

  " More text objects
  call minpac#add('wellle/targets.vim')

endfunction

command! PackClean  call PackInit() | call minpac#clean()
command! PackStatus call PackInit() | call minpac#status()
command! PackUpdate call PackInit() | call minpac#update('', {'do': 'call minpac#status()'})
command! PackUpdateAndQuit call PackInit() | call minpac#update('', {'do': 'qall'})
" }}}

" {{{ Key Mappings
" Set the Leader key to Space
nnoremap <Space> <Nop>
let mapleader = "\<Space>"
let maplocalleader = ','

" Save a file
nnoremap <Leader>w :w<CR>

" Go to first file on the line
nnoremap <leader>gf ^f/gf

" Turn off search highlighting
" nnoremap <silent> <Leader>/ :let @/ = ""<esc>

" Replace all occurrences of word under cursor
nnoremap <Leader>h :%s/\<<C-r><C-w>\>//g<Left><Left>

" Use wildmenu to quickly switch buffers
nnoremap <Leader><Tab> :buffer<Space><Tab>

" Format entire file
nnoremap <Leader>= gg=G<C-o><C-o>

" Open lazygit in a new tab
nnoremap <silent> <Leader>G :tab term ++close lazygit<CR>

" Quicker split resizing
noremap <Leader><Left>  :vertical resize -3<CR>
noremap <Leader><Right> :vertical resize +3<CR>
noremap <Leader><Up>    :resize +3<CR>
noremap <Leader><Down>  :resize -3<CR>

" Joining lines will keep cursor position
nnoremap J mzJ`z

" Next/previous search matches unfolded and centered on screen
" noremap n nzvzz
" noremap N Nzvzz

" Open new line and stay in normal mode
nnoremap <Leader>o o<esc>
nnoremap <Leader>O O<esc>

" Yank to the end of line
map Y y$

" Don't jump to next match on *
nnoremap * *<c-o>

" Exit insert mode faster
inoremap <esc> <esc>l
inoremap kj <esc>l
inoremap <C-c> <esc>l

" Fix arrow keys in insert mode
inoremap <silent> <Esc>OA <Up>
inoremap <silent> <Esc>OB <Down>
inoremap <silent> <Esc>OC <Right>
inoremap <silent> <Esc>OD <Left>

" Move lines in normal, insert, and visual with alt+j/k
if has('mac')
  nnoremap ∆ m`:move .+1<CR>==``
  nnoremap ˚ m`:move .-2<CR>==``
  inoremap ∆ <Esc>m`:move .+1<CR>==``gi
  inoremap ˚ <Esc>m`:move .-2<CR>==``gi
  vnoremap ∆ :move '>+1<CR>gv=gv
  vnoremap ˚ :move '<-2<CR>gv=gv
else
  nnoremap <Esc>j m`:move .+1<CR>==``
  nnoremap <Esc>k m`:move .-2<CR>==``
  inoremap <Esc>j <Esc>m`:move .+1<CR>==``gi
  inoremap <Esc>k <Esc>m`:move .-2<CR>==``gi
  vnoremap <Esc>j :move '>+1<CR>gv=gv
  vnoremap <Esc>k :move '<-2<CR>gv=gv
endif

" Movement in insert mode
inoremap <C-h> <C-o>h
inoremap <C-l> <C-o>a
inoremap <C-j> <C-o>j
inoremap <C-k> <C-o>k
inoremap <C-^> <C-o><C-^>

" <CTRL>h/j/k/l -> Switch between buffers 
" NOTE: superseded by vim-tmux-navigator
" nnoremap <C-j> <C-w>j
" nnoremap <C-k> <C-w>k
" nnoremap <C-h> <C-w>h
" nnoremap <C-l> <C-w>l

" <CTRL-W>h/j/k/l -> Move windows left/up/down/right
nnoremap <C-w>j <C-w>J
nnoremap <C-w>k <C-w>K
nnoremap <C-w>h <C-w>H
nnoremap <C-w>l <C-w>L

" +/- -> Increment/decrement numbers in normal or visual mode
nnoremap + <C-a>
nnoremap - <C-x>
vnoremap + g<C-a>gv
vnoremap - g<C-x>gv

" Tab navigation in normal mode
nnoremap <tab> gt

" Command line begin/end line
cnoremap <c-a> <home>
cnoremap <c-e> <end>

" Visual mode search word under cursor with */#
function! s:VSetSearch()
  let temp = @@
  norm! gvy
  let @/ = '\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
  let @@ = temp
endfunction
vnoremap * :<C-u>call <SID>VSetSearch()<CR>//<CR><c-o>
vnoremap # :<C-u>call <SID>VSetSearch()<CR>??<CR><c-o>

" Navigate through partial search matches with tab/s-tab
cnoremap <expr> <tab> getcmdtype() =~ '[/?]' ? "<c-g>" : "<tab>"
cnoremap <expr> <s-tab> getcmdtype() =~ '[/?]' ? "<c-t>" : "<s-tab>"

" Apply last edit to visual selection
vnoremap . :norm .<CR>

" Enter normal mode while in terminal mode
tnoremap <esc> <C-\><C-N>
" }}}

" {{{ Autocommands

" When editing a file, always jump to the last known cursor position.
" from $VIMRUNTIME/defaults.vim
augroup vimStartup
  autocmd!
  autocmd BufReadPost *
        \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
        \ |   exe "normal! g`\""
        \ | endif
augroup END

" Save modified buffer during idle after 'updatetime' has elapsed (default 4 sec)
augroup AutoSave
  autocmd!
  autocmd CursorHoldI,CursorHold * silent! :update
augroup END

" Automatically equalize splits when Vim is resized
augroup AutoResizePanesOnVimResize
  autocmd!
  autocmd VimResized * wincmd =
augroup END

" Automatically source Session.vim if it exists
augroup AutoSourceSession
  autocmd!
  autocmd VimEnter * nested
        \ if !argc() && empty(v:this_session) && filereadable('Session.vim') && !&modified |
        \   source Session.vim |
        \ endif
augroup END

" Show cursorline in active window (line number only)
augroup CursorLineOnlyInActiveWindow
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  autocmd WinLeave * setlocal nocursorline
augroup END

" WSL yank support
let s:clip = '/mnt/c/Windows/System32/clip.exe'
if executable(s:clip)
  augroup WSLYank
    autocmd!
    autocmd TextYankPost * if v:event.operator ==# 'y' | call system(s:clip, @0) | endif
  augroup END
endif
" }}}

" {{{ Options
" General
if !&modeline|set modeline|endif " Enable modeline which may be off by default
filetype plugin indent on        " Load plugins according to detected filetype
set backspace=indent,eol,start   " Make backspace work as you would expect
set directory=/tmp//             " Location of the swap file
set display=lastline             " Show as much as possible of the last line
set encoding=utf-8               " Properly display UTF-8 symbols
scriptencoding utf-8             " Specify character encoding used in this file
set foldopen+=jump               " Open a fold if we jump inside it
set hidden                       " Switch between buffers without having to save first
set iskeyword+=-                 " Treat dash separated words as a word text object
set laststatus=2                 " Always show statusline
set nobackup                     " Disable backup files
set noshowmode                   " Don't show current mode in command-line
set pastetoggle=<F2>             " Toggle paste mode on/off
set shortmess=aFIT               " Customize vim messages
set showcmd                      " Show already typed keys when more are expected
set spelllang=en_us              " Set language for spell checking
set termguicolors                " Use 24-bit colors

" Editing
syntax on                        " Enable syntax highlighting
set autoindent                   " Indent according to previous line
set expandtab                    " Use spaces instead of tabs
set fillchars+=vert:\│,fold:\    " Vertical split and fold separators
set matchpairs+=<:>              " Add angle brackets to list of matching pairs
set nowrap                       " Do not automatically wrap on load
set number                       " Show line numbers
set shiftround                   " >> indents to next multiple of 'shiftwidth'
set shiftwidth=2                 " >> indents by 2 spaces
set softtabstop=2                " Tab key indents by 4 spaces
set splitbelow splitright        " Open new split panes to right and bottom
set textwidth=0                  " Disable maximum text width

" Searching
set ignorecase                   " Case insensitive search
set incsearch                    " Highlight while searching with / or ?
set path=$PWD/**                 " Find all files under this directory
set smartcase                    " Case sensitive search when using capital letter
set wildcharm=<Tab>              " Allow wildmenu expansion from macros/remaps
set wildignorecase               " Case-insensitive completion of commands, filenames
set wildmenu                     " Enhanced command-line completion

" Cursor shape
let &t_SI = "\e[6 q"             " INSERT mode - beam cursor
let &t_EI = "\e[2 q"             " NORMAL mode - block cursor
let &t_SR = "\e[4 q"             " REPLACE mode - underline cursor

" Yank to system clipboard, X11 support
if has('clipboard')
  set clipboard=unnamed
  if has('unnamedplus')
    set clipboard+=unnamedplus
  endif
endif

" True color support
if exists('$TMUX')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

" Colorscheme settings
set background=dark
" " {{{ gruvbox8
" let g:gruvbox_filetype_hi_groups = 1
" let g:gruvbox_italics = 0
" let g:gruvbox_italicize_strings = 0
" let g:gruvbox_plugin_hi_groups = 1
" colorscheme gruvbox8
" highlight! link SignColumn LineNr
" highlight! link CocDiffAdd Directory
" highlight! link CocDiffChange Conceal
" highlight! link CocDiffDelete WarningMsg
" " }}}
" " {{{ gruvbox-material
" let g:gruvbox_material_background = 'hard'
" let g:gruvbox_material_disable_italic_comment = 1
" let g:gruvbox_material_sign_column_background = 'none'
" let g:gruvbox_material_better_performance = 1
" packadd! gruvbox-material
" colorscheme gruvbox-material
" " }}}
highlight clear CursorLine  " Highlight current line number rather than entire line

" vim:fdm=marker
" }}}
