" {{{ General
" vim:fdm=marker
if &cp  | set nocp | endif      " Set nocompatible if -u option is used, default is off
if !&ml | set ml   | endif      " Enable modeline which may be off by default
filetype plugin indent on       " Load plugins according to detected filetype
set backspace=indent,eol,start  " Make backspace work as you would expect
set directory=/tmp//            " Location of the swap file
set display=lastline            " Show as much as possible of the last line
set encoding=utf-8              " Properly display UTF-8 symbols
set foldopen+=jump              " Open a fold if we jump inside it
set hidden                      " Switch between buffers without having to save first
set iskeyword+=-                " Treat dash separated words as a word text object
set laststatus=2                " Always show statusline
set nobackup                    " Disable backup files
set noshowmode                  " Don't show current mode in command-line
set pastetoggle=<F2>            " Toggle paste mode on/off
set shortmess=aFIT              " Customize vim messages
set showcmd                     " Show already typed keys when more are expected
" }}}

" {{{ Plugins
function! PackInit() abort

  " Plugin manager
  packadd minpac
  call minpac#init()
  call minpac#add('k-takata/minpac', {'type': 'opt'})

  " Color themes
  call minpac#add('chriskempson/base16-vim')          " additional settings: ~/.vim/plugin/base16.vim

  " Navigation between tmux panes and vim splits
  call minpac#add('christoomey/vim-tmux-navigator')

  " Syntax and semantic error checking
  call minpac#add('dense-analysis/ale')               " additional settings: ~/.vim/plugin/ale.vim

  " Fuzzy finder
  call minpac#add('junegunn/fzf.vim')                 " additional settings: ~/.vim/plugin/fzf.vim

  " Git information in the sign column
  call minpac#add('mhinz/vim-signify')                " additional settings: ~/.vim/plugin/signify.vim

  " Start page with recently used files
  " call minpac#add('mhinz/vim-startify')               " additional settings: ~/.vim/plugin/startify.vim

  " Code commenting shortcuts
  call minpac#add('tpope/vim-commentary')             " additional settings: ~/.vim/plugin/commentary.vim

  " Git shortcuts
  call minpac#add('tpope/vim-fugitive')

  " Session shortcuts
  call minpac#add('tpope/vim-obsession')              " additional settings: ~/.vim/plugin/obsession.vim

  " Add, change, delete surroundings in pairs
  call minpac#add('tpope/vim-surround')

  " Better paste behavior
  call minpac#add('ConradIrwin/vim-bracketed-paste')

  " Highlight yanked text
  call minpac#add('machakann/vim-highlightedyank')

  " Automatically change to file's project directory
  call minpac#add('airblade/vim-rooter')

endfunction

command! PackClean  call PackInit() | call minpac#clean()
command! PackStatus call PackInit() | call minpac#status()
command! PackUpdate call PackInit() | call minpac#update('', {'do': 'call minpac#status()'})
command! PackUpdateAndQuit call PackInit() | call minpac#update('', {'do': 'qall'})

set rtp+=$HOME/.fzf,/usr/local/opt/fzf
" }}}

" {{{ Colorscheme
" True color support
if exists('$TMUX')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif
set termguicolors

" Colorscheme is loaded from Base16-shell via
" ~/.vim/plugin/base16.vim
" }}}

" {{{ Editor Formatting
syntax on                       " Enable syntax highlighting
set autoindent                  " Indent according to previous line
set number                      " Show line numbers
set expandtab                   " Use spaces instead of tabs
set softtabstop=2               " Tab key indents by 4 spaces
set shiftwidth=2                " >> indents by 2 spaces
set shiftround                  " >> indents to next multiple of 'shiftwidth'
set nowrap                      " Do not automatically wrap on load
set textwidth=0                 " disable maximum text width

" Disable auto-commenting on new lines
autocmd FileType * set fo-=c fo-=r fo-=o fo-=j

" Show cursorline in active window (line number only)
augroup CursorLineOnlyInActiveWindow
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  autocmd WinLeave * setlocal nocursorline
augroup END
highlight clear CursorLine  " Highlight current line number rather than entire line

" Format cursor based on mode
let &t_SI = "\e[6 q"
let &t_SR = "\e[4 q"
let &t_EI = "\e[2 q"
" }}}

" {{{ Searching
set ignorecase              " Case insensitive search
set smartcase               " Case sensitive search when using capital letter
set incsearch               " Highlight while searching with / or ?
set hlsearch                " Keep matches highlighted
set gdefault                " Global substitution by default
set path=$PWD/**            " Find all files under this directory
set wildmenu wildmode=full  " Show auto-complete suggestions in command line

" }}}

" {{{ Netrw
let g:netrw_banner=0              " Disable netrw banner
let g:netrw_dirhistmax=0          " Disable netrw history
let g:netrw_liststyle=3           " Netrw liststyle as tree
let g:netrw_altv=1                " Open files on right
let g:netrw_preview=1             " Open previews vertically
let g:netrw_list_hide= '.*\.swp$' " Ignore swp files in tree
" }}}

" {{{ Splits
set splitbelow splitright     " Open new split panes to right and bottom
set fillchars+=vert:│,fold:\  " Vertical split and fold separators

" Automatically equalize splits when Vim is resized
autocmd VimResized * wincmd =

" :Vsf <filename> -> open file in vertical split
command! -nargs=1 -complete=file_in_path Vsf vertical sfind <args>
" }}}

" {{{ Remaps
" Set the leader key to Space
nnoremap <Space> <Nop>
let mapleader = "\<Space>"

" kj -> Exit insert mode faster
inoremap kj <esc>
inoremap <C-c> <esc>

" Save a file
inoremap <C-s>     <C-O>:update<cr>
nnoremap <C-s>     :update<cr>
nnoremap <leader>w :update<cr>

" Replace all occurrences of word under cursor
nnoremap <leader>h :%s/\<<C-r><C-w>\>//g<Left><Left>

" Movement in insert mode
inoremap <C-h> <C-o>h
inoremap <C-l> <C-o>a
inoremap <C-j> <C-o>j
inoremap <C-k> <C-o>k
inoremap <C-^> <C-o><C-^>

" Move lines in normal, insert, and visual with alt+j/k
if has('mac')
  nnoremap ∆ m`:move .+1<CR>==``
  nnoremap ˚ m`:move .-2<CR>==``
  inoremap ∆ <Esc>m`:move .+1<CR>==``gi
  inoremap ˚ <Esc>m`:move .-2<CR>==``gi
  vnoremap ∆ :move '>+1<CR>gv=gv
  vnoremap ˚ :move '<-2<CR>gv=gv
else
  nnoremap <Esc>j m`:move .+1<CR>==``
  nnoremap <Esc>k m`:move .-2<CR>==``
  inoremap <Esc>j <Esc>m`:move .+1<CR>==``gi
  inoremap <Esc>k <Esc>m`:move .-2<CR>==``gi
  vnoremap <Esc>j :move '>+1<CR>gv=gv
  vnoremap <Esc>k :move '<-2<CR>gv=gv
endif

" <leader>/ -> Turn off search highlighting
nnoremap <silent> <leader>/ :let @/ = ""<esc>

" Center next/previous search matches
noremap n nzz
noremap N Nzz

" Don't jump to next match on *
nnoremap * *<c-o>

" Yank to the end of line
map Y y$

" <CTRL>h/j/k/l -> Switch between buffers - superceded by vim-tmux-navigator
" nnoremap <C-j> <C-w>j
" nnoremap <C-k> <C-w>k
" nnoremap <C-h> <C-w>h
" nnoremap <C-l> <C-w>l

" <CTRL-W>h/j/k/l -> Move windows left/up/down/right
nnoremap <C-w>j <C-w>J
nnoremap <C-w>k <C-w>K
nnoremap <C-w>h <C-w>H
nnoremap <C-w>l <C-w>L

" <CTRL>up/down/left/right -> Quicker split resizing
noremap <silent> <C-Left> :vertical resize -3<CR>
noremap <silent> <C-Right> :vertical resize +3<CR>
noremap <silent> <C-Up> :resize +3<CR>
noremap <silent> <C-Down> :resize -3<CR>

" +/- -> Increment/decrement numbers in normal or visual mode
nnoremap + <C-a>
nnoremap - <C-x>
vnoremap + g<C-a>gv
vnoremap - g<C-x>gv

" Use wildmenu to quickly switch buffers
set wildcharm=<Tab>
nnoremap <Leader><Tab> :buffer<Space><Tab>

" Format entire file
map <leader>= gg=G<C-o><C-o>≤

" Open lazygit in a new tab
noremap <silent> <leader>G :tab term ++close lazygit<CR>

" Tab navigation from a terminal window
tmap <C-h> <C-w>:tabp<CR>
tmap <C-l> <C-w>:tabn<CR>

" Tab navigation in normal mode
nnoremap <tab> gt

" Command line begin/end line
cnoremap <c-a> <home>
cnoremap <c-e> <end>

" Keep the cursor in place while joining lines
nnoremap J mzJ`z

" Visual mode search word under cursor with */#
function! s:VSetSearch()
  let temp = @@
  norm! gvy
  let @/ = '\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
  let @@ = temp
endfunction
vnoremap * :<C-u>call <SID>VSetSearch()<CR>//<CR><c-o>
vnoremap # :<C-u>call <SID>VSetSearch()<CR>??<CR><c-o>

" Open new line and stay in normal mode
nnoremap o o<esc>
nnoremap O O<esc>
" }}}

" {{{ C++ Specific
" custom make commands for c++ projects
let &makeprg='make -j3 -C build --no-print-directory'
command! Cmake let &makeprg = 'make -j3 -C build --no-print-directory' <bar> make
command! Ctest let &makeprg = 'cd build && ctest --output-on-failure'  <bar> make
" }}}
